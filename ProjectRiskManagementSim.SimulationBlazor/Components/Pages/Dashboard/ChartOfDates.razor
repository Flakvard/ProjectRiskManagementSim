@using ProjectRiskManagementSim.DataAccess
@using ProjectRiskManagementSim.DataAccess.Models
@inject IServiceScopeFactory ServiceScopeFactory;
@inject HtmxContext Context
@page "/chart/{ProjectSimulationId:int}"

<HtmxFragment Match=@(req=> req.Target == "leftside-content")>
    <div id="leftside-content" hx-get="/chart/@ProjectSimulationId" hx-trigger=@Trigger.OnEvent("newForcast").From("body") @onget="HandleChart"
         hx-swap=@SwapStyles.OuterHTML class="p-4 bg-[#ffb4ba]/25 rounded-2xl grow self-stretch justify-center items-center gap-2.5 flex">
        <div class="bg-white rounded-2xl w-full h-[400px]" id="chart"></div>
        <!-- In your HTMX Response (Backend) -->

@{
    var sortedSimulations = dashboardInfoHandler._simulations.OrderBy(id => id.Id).ToList();
}
        @if (dashboardInfoHandler._simulations != null)
        {
            <script>


                // Prepare the data by looping through the C# collection and outputting it as JavaScript
                window.newChartData = {
                    simDateData: [
                                    @foreach (var simulation in sortedSimulations)
                                    {

                                        @if (simulation.SimEndDate != null)
                                        {
                                            <text>
                                            {
                                              x: new Date('@(simulation.SimEndDate?.ToString("yyyy-MM-dd") ?? "1970-01-01")').getTime(),
                                              y: new Date('@(simulation.SimEndDate?.ToString("yyyy-MM-dd") ?? "1970-01-01")').getTime()
                                            },
                                            </text>
                                        }
                                    }
                                  ],
                    targetDateData: [
                                        @foreach (var simulation in dashboardInfoHandler._simulations)
                                        {
                                            @if (simulation.SimEndDate != null)
                                            {
                                                <text>
                                                        {
                                                            x: new Date('@(simulation.SimEndDate?.ToString("yyyy-MM-dd") ?? "1970-01-01")').getTime(),
                                                            y: new Date('@(simulation.TargetDate.ToString("yyyy-MM-dd") ?? "1970-01-01")').getTime()
                                                        },
                                                </text>
                                            }
                                        }
                                    ]
                };


                // Initialize chart immediately
                initializeChart(window.newChartData);
            </script>
        }
        else
        {
            <script>
                // Set new chart data globally for access after HTMX event
                window.newChartData = {
                    simDateData: [
                        { x: new Date('2024-01-01').getTime(), y: new Date('2024-01-01').getTime() },
                    ],
                    targetDateData: [
                        { x: new Date('2024-01-01').getTime(), y: new Date('2024-01-01').getTime() },
                    ]
                };

                // Initialize chart immediately
                initializeChart(window.newChartData);
            </script>
        }
    </div>
</HtmxFragment>

@code {
    private OxygenSimulationContext _context;

    [Parameter] public int ProjectSimulationId { get; set; }
    public DashboardInfoHandler dashboardInfoHandler { get; set; }
    protected override async Task OnInitializedAsync()
    {
        using var scope = ServiceScopeFactory.CreateScope();
        _context = scope.ServiceProvider.GetRequiredService<OxygenSimulationContext>();
        dashboardInfoHandler = new DashboardInfoHandler(ProjectSimulationId);
        await dashboardInfoHandler.InitializeProjectsAsync(_context);
    }

    private void HandleChart(HtmxEventArgs args)
    {
        if (Context != null && dashboardInfoHandler._simulations != null)
        {
            //Context.Response.Trigger("apexCharts");
            Context.Response.Refresh();
        }
    }

}