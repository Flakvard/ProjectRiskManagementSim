@using ProjectRiskManagementSim.DataAccess
@using ProjectRiskManagementSim.DataAccess.Models
@inject IServiceScopeFactory ServiceScopeFactory;

<!-- Dashboard -->
<div id="dashboardMain" class="flex flex-row">
  <!-- Main Content -->
  <div class="flex">
    <!-- Upper dashboard Content -->
    <div class="Upperdashboard self-stretch grow shrink basis-0 justify-start items-start gap-[17px] inline-flex">
      <!-- Upper Left Content -->

      <div class="LeftsideSection w-full self-stretch p-[15px] justify-center items-start gap-[30px] flex flex-col">

        <div class="p-4 bg-[#ffb4ba]/25 rounded-2xl grow self-stretch justify-center items-center gap-2.5 flex">
          <div class="bg-white rounded-2xl w-full h-[400px]" id="chart"></div>
          <!-- In your HTMX Response (Backend) -->
          <script>
            // Set new chart data globally for access after HTMX event
            window.newChartData = {
              simDateData: [
                {x: new Date('2024-08-25').getTime(), y: new Date('2024-08-25').getTime()},
                {x: new Date('2024-10-20').getTime(), y: new Date('2024-10-20').getTime()},
                {x: new Date('2024-11-09').getTime(), y: new Date('2024-11-09').getTime()},
                {x: new Date('2024-11-19').getTime(), y: new Date('2024-11-19').getTime()},
                {x: new Date('2024-12-09').getTime(), y: new Date('2024-12-09').getTime()},
                {x: new Date('2024-12-19').getTime(), y: new Date('2024-12-19').getTime()},
                {x: new Date('2025-01-08').getTime(), y: new Date('2025-01-08').getTime()}
              ],
              targetDateData: [
                {x: new Date('2024-08-25').getTime(), y: new Date('2024-10-01').getTime()},
                {x: new Date('2024-10-20').getTime(), y: new Date('2024-10-01').getTime()},
                {x: new Date('2024-11-09').getTime(), y: new Date('2024-11-09').getTime()},
                {x: new Date('2024-11-19').getTime(), y: new Date('2024-11-09').getTime()},
                {x: new Date('2024-12-09').getTime(), y: new Date('2024-11-09').getTime()},
                {x: new Date('2024-12-19').getTime(), y: new Date('2024-11-09').getTime()},
                {x: new Date('2025-01-08').getTime(), y: new Date('2025-01-01').getTime()}
              ]
            };

            // Initialize chart immediately
            initializeChart(window.newChartData);
          </script>
        </div>

        <div class="w-full h-full items-start">
          <div class="p-4 bg-[#ffb4ba]/25 rounded-2xl">
            <div class="overflow-auto h-full w-full">
              <SimulationsResultTable />
            </div>
          </div>
        </div>

      </div>
      <!-- Upper Right Content -->
      <div
        class="RightsideFrame grow shrink basis-0 self-stretch p-[15px] flex-col justify-start items-start inline-flex">
        <div
          class="UpperRightFrame overflow-auto self-stretch grow shrink basis-0 h-full flex-col justify-start items-start gap-[30px] flex">
          @if (@dashboardInfoHandler._simulation != null)
          {
          <ForecastAnalysis ProjectSimulationId=@ProjectSimulationId Simulation=@dashboardInfoHandler._simulation />

          <!-- Two Analysis in Lower Right Content -->
          <div class="TwoAnalysis self-stretch grow shrink basis-0 justify-start items-start gap-[30px] inline-flex">
            <SensitivityAnalysis ProjectSimulationId=@ProjectSimulationId
              Simulation=@dashboardInfoHandler._simulation />
            <StaffAnalysis ProjectSimulationId=@ProjectSimulationId Simulation=@dashboardInfoHandler._simulation />
          </div>
          }
        </div>
      </div>
    </div>
    <!-- Lower dashboard Content -->

  </div>
  <!-- Possible right side Main Content -->
</div>

@code {
private OxygenSimulationContext _context;

[Parameter] public int ProjectSimulationId { get; set; }
public DashboardInfoHandler dashboardInfoHandler { get; set; }
protected override async Task OnInitializedAsync()
{
using var scope = ServiceScopeFactory.CreateScope();
_context = scope.ServiceProvider.GetRequiredService<OxygenSimulationContext>();
  dashboardInfoHandler = new DashboardInfoHandler(ProjectSimulationId);
  await dashboardInfoHandler.InitializeProjectsAsync(_context);
  }
  }
  }
