@using ProjectRiskManagementSim.DataAccess
@using ProjectRiskManagementSim.DataAccess.Models
@using System.Globalization
@inject IServiceScopeFactory ServiceScopeFactory;
@inject HtmxContext Context
@page "/chart/{ProjectSimulationId:int}"

<HtmxFragment Match=@(req=> req.Target == "leftside-content")>
    <div id="leftside-content" hx-get="/chart/@ProjectSimulationId" hx-trigger=@Trigger.OnEvent("newForcast").From("body") @onget="HandleChart"
         hx-swap=@SwapStyles.OuterHTML class="p-4 bg-[#ffb4ba]/25 rounded-2xl grow shrink self-stretch justify-center items-center gap-2.5 flex ">
        <div id="synced-charts" class="rounded-2xl grow shrink self-stretch justify-center items-center gap-2.5 flex flex-col">
            <div class="bg-white rounded-2xl w-full" id="lineChart"></div>
            <div class="bg-white rounded-2xl w-full" id="barChart"></div>
        </div>
        <!-- In your HTMX Response (Backend) -->

@{
    var sortedSimulations = dashboardInfoHandler._simulations.OrderBy(id => id.Id).ToList();
}
        @if (dashboardInfoHandler._simulations != null)
        {
            <script>

                // Extract simulation names to use as categories on the x-axis
                let simulationNames = [
                    @foreach (var simulation in sortedSimulations)
                    {
                        <text>'@simulation.Name',</text>
                    }
                ];
                // Prepare the data by looping through the C# collection and outputting it as JavaScript
                window.newChartData = {
                    categories: simulationNames,  // Assign SimulationName as categories for better alignment
                    simDateData: [
                                    @foreach (var simulation in sortedSimulations)
                                    {

                                        @if (simulation.SimulationCosts != null)
                                        {
                                            <text>
                                            {
                                              x: '@(simulation.Name.ToString() ?? "NaN")',
                                              y: new Date('@(simulation.SimEndDate?.ToString("yyyy-MM-dd") ?? "1970-01-01")').getTime(),
                                              label: '@simulation.Name'
                                            },
                                            </text>
                                        }
                                    }
                                  ],
                    targetDateData: [
                                        @foreach (var simulation in dashboardInfoHandler._simulations)
                                        {
                                            @if (simulation.SimEndDate != null)
                                            {
                                                <text>
                                                        {
                                                            x: '@(simulation.Name.ToString() ?? "NaN")',
                                                            y: new Date('@(simulation.TargetDate.ToString("yyyy-MM-dd") ?? "1970-01-01")').getTime(),
                                                            label: '@simulation.Name'
                                                        },
                                                </text>
                                            }
                                        }
                                    ],
                    budgetCostData: [
                                    @foreach (var simulation in sortedSimulations)
                                    {
                                        <text>
                                                    {
                                                        x: '@simulation.Name',
                                y: @simulation.BudgetCosts?.ToString("F0", CultureInfo.InvariantCulture) // Assuming BudgetCosts is a numerical value
                                                    },
                                        </text>
                                    }
                                        ],
                                        simulationCostData: [
                                    @foreach (var simulation in sortedSimulations)
                                    {
                                        <text>
                                                    {
                                                        x: '@simulation.Name',
                                y: @simulation.SimulationCosts?.ToString("F0", CultureInfo.InvariantCulture) // Assuming SimulationCosts is a numerical value
                                                    },
                                        </text>
                                    }
                                    ]
                };


                // Initialize chart immediately
                initializeChart(window.newChartData);
            </script>
        }
        else
        {
            <script>
                // Set new chart data globally for access after HTMX event
                window.newChartData = {
                    simDateData: [
                        { x: new Date('2024-01-01').getTime(), y: new Date('2024-01-01').getTime() },
                    ],
                    targetDateData: [
                        { x: new Date('2024-01-01').getTime(), y: new Date('2024-01-01').getTime() },
                    ]
                };

                // Initialize chart immediately
                initializeChart(window.newChartData);
            </script>
        }
    </div>
</HtmxFragment>

@code {
    private OxygenSimulationContext _context;

    [Parameter] public int ProjectSimulationId { get; set; }
    public DashboardInfoHandler dashboardInfoHandler { get; set; }
    protected override async Task OnInitializedAsync()
    {
        using var scope = ServiceScopeFactory.CreateScope();
        _context = scope.ServiceProvider.GetRequiredService<OxygenSimulationContext>();
        dashboardInfoHandler = new DashboardInfoHandler(ProjectSimulationId);
        await dashboardInfoHandler.InitializeProjectsAsync(_context);
    }

    private void HandleChart(HtmxEventArgs args)
    {
        if (Context != null && dashboardInfoHandler._simulations != null)
        {
            //Context.Response.Trigger("apexCharts");
            Context.Response.Refresh();
        }
    }

}