@layout DashboardLayout
@page "/simulations"
@inject HttpClient Http
@using ProjectRiskManagementSim.ProjectSimulation;
@using ProjectRiskManagementSim.SimulationBlazor.Lib;

<h3>Monte Carlo Simulation</h3>

@if (simulationInProgress)
{
<div id="simulation-results" hx-get="@($" /simulation-progress/{simulationId}")" hx-trigger="every 1s"
  hx-swap="innerHTML">
  <!-- Simulation progress will be dynamically inserted here -->
  <div>
    <h4>Current Day: @simulationState.CurrentDay</h4>
    <div>
      @foreach (var column in simulationState.Columns)
      {
      <div>
        <h5>@column.Key.Name (WIP: @column.Key.WIP)</h5>
        <ul>
          @foreach (var deliverable in column.Value)
          {
          <li>T: @deliverable.Nr, D: @deliverable.CompletionDays, W: @deliverable.WaitTime, S:
            @deliverable.StoppedWorkingTime</li>
          }
        </ul>
      </div>
      }
    </div>
  </div>
</div>
}
else
{
<button @onclick="StartSimulation">Start Simulation</button>
}

@code {
private string simulationId;
private bool simulationInProgress = false;
private SimulationState simulationState = new SimulationState();

private async Task StartSimulation()
{
var deliverableModel = new List<DeliverableModel>();
  for (var i = 1; i < 36; i++) { deliverableModel.Add(new DeliverableModel { Id=Guid.NewGuid(), Nr=i }); } var
    backLogModel=new BacklogModel { Deliverables=deliverableModel, PercentageLowBound=0.5, PercentageHighBound=0.8 };
    var wip=30; var wip10=10; var wip5=5; var projectSimModel=new ProjectSimulationModel { Name="Baseline" , Staff=new
    List<StaffModel>
    {
    new StaffModel { Name = "John Doe", Role = Role.ProjectManager, Sale = 1000, Cost = 370, Days = 20 },
    new StaffModel { Name = "Jane Doe", Role = Role.FrontendDeveloper, Sale = 1000, Cost = 370, Days = 20 },
    new StaffModel { Name = "Jack Doe", Role = Role.BackendDeveloper, Sale = 1000, Cost = 370, Days = 20 },
    new StaffModel { Name = "Jill Doe", Role = Role.SoftwareTester, Sale = 1000, Cost = 370, Days = 20 },
    new StaffModel { Name = "Jim Doe", Role = Role.UXUIDesigner, Sale = 1000, Cost = 370, Days = 20 }
    },
    StartDate = new DateTime(2024, 1, 1),
    TargetDate = new DateTime(2024, 3, 15),
    Revenue = new RevenueModel { Amount = 480000 },
    Costs = new CostModel { Cost = 177600, Days = 20 },
    Backlog = backLogModel,
    Columns = new List<ColumnModel>
      {
      new ColumnModel(wip: backLogModel.Deliverables.Count) { Name = "Backlog", IsBuffer=true, EstimatedLowBound = 1,
      EstimatedHighBound = 54 },
      new ColumnModel(wip: wip5, wipMax: wip5) { Name = "Open", IsBuffer=true, EstimatedLowBound = 1, EstimatedHighBound
      = 54 },
      new ColumnModel(wip: 5, wipMax: 5) { Name = "In Progress", EstimatedLowBound = 1, EstimatedHighBound = 47 },
      new ColumnModel(wip: wip10, wipMax: wip10) { Name = "Rdy4Test", IsBuffer=true, EstimatedLowBound = 1,
      EstimatedHighBound = 50 },
      new ColumnModel(wip: 0, wipMax: 2) { Name = "Test Stage", EstimatedLowBound = 1, EstimatedHighBound = 11 },
      new ColumnModel(wip: wip10, wipMax: wip10) { Name = "Await Dply Prod", IsBuffer=true, EstimatedLowBound = 1,
      EstimatedHighBound = 22 },
      new ColumnModel(wip: 0, wipMax: 2) { Name = "Rdy4TestProd", EstimatedLowBound = 1, EstimatedHighBound = 54 },
      new ColumnModel(wip: backLogModel.Deliverables.Count) { Name = "Done", IsBuffer=true, EstimatedLowBound = 1,
      EstimatedHighBound = 54 }
      },
      };

      // Send the request to start the simulation
      var response = await Http.PostAsJsonAsync("/start-simulation", projectSimModel);
      var result = await response.Content.ReadFromJsonAsync<SimulationResponse>();

        if (result != null)
        {
        simulationId = result.SimulationId;
        simulationInProgress = true;
        }
        }
        }

        // Models for simulation state
        public class SimulationState
        {
        public double CurrentDay { get; set; }
        public Dictionary<ColumnModel, List<DeliverableModel>> Columns { get; set; } = new();
          }

          // Models for sending/receiving data (adjust these as needed)
          public class SimulationResponse
          {
          public string SimulationId { get; set; }
          }
